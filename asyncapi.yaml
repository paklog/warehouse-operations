asyncapi: 2.5.0
info:
  title: Warehouse Operations Events (CloudEvents)
  version: 1.0.0
  description: |
    Defines the complete event-driven contract for the Warehouse Operations Bounded Context.
    It consumes events from Order Management to start work and publishes events upon completion of the physical packing process.
    All events conform to the CloudEvents v1.0 specification.

servers:
  production:
    url: kafka-prod.example.com:9092
    protocol: kafka
    description: Production Kafka broker

channels:
  fulfillment.order_management.v1.events:
    description: The topic this service subscribes to for upstream order events. This is the entry point for new work.
    subscribe:
      summary: Consume validated order events to begin warehouse processing.
      message:
        $ref: '#/components/messages/FulfillmentOrderValidated'

  fulfillment.warehouse.v1.events:
    description: The topic this service publishes its own domain events to. This is the exit point for completed work.
    publish:
      summary: Publish an event when a package has been physically packed and is ready for shipment.
      message:
        $ref: '#/components/messages/PackagePacked'

components:
  messages:
    FulfillmentOrderValidated:
      name: fulfillment_order_validated
      title: Fulfillment Order Validated
      summary: Consumes this event to trigger the Workload Orchestrator. This is the primary input to the Bounded Context.
      contentType: application/cloudevents+json
      payload:
        $ref: "#/components/schemas/FulfillmentOrderValidatedCloudEvent"

    PackagePacked:
      name: package_packed
      title: Package Packed
      summary: Published when a packer confirms an order is fully packed and sealed. This is the primary output of the Bounded Context.
      contentType: application/cloudevents+json
      payload:
        $ref: "#/components/schemas/PackagePackedCloudEvent"

  schemas:
    # --- Incoming Event Definition ---
    FulfillmentOrderValidatedCloudEvent:
      type: object
      required: [specversion, type, source, id, time, data]
      properties:
        specversion:
          type: string
          enum: ["1.0"]
        type:
          type: string
          enum: ["com.example.fulfillment.order.validated"]
        source:
          type: string
          format: uri-reference
          example: "/fulfillment/order-management-service"
        subject:
          type: string
          description: The `order_id` of the fulfillment order.
        id:
          type: string
          format: uuid
        time:
          type: string
          format: date-time
        datacontenttype:
          type: string
          enum: ["application/json"]
        data:
          $ref: '#/components/schemas/FulfillmentOrderValidatedData'

    # --- Outgoing Event Definition ---
    PackagePackedCloudEvent:
      type: object
      required: [specversion, type, source, id, time, data]
      properties:
        specversion:
          type: string
          enum: ["1.0"]
        type:
          type: string
          enum: ["com.example.fulfillment.warehouse.package.packed"]
        source:
          type: string
          format: uri-reference
          example: "/fulfillment/warehouse-operations-service"
        subject:
          type: string
          description: The `package_id` of the packed package.
        id:
          type: string
          format: uuid
        time:
          type: string
          format: date-time
        datacontenttype:
          type: string
          enum: ["application/json"]
        data:
          $ref: '#/components/schemas/PackagePackedData'

    # --- Domain-Specific Data Payloads ---
    FulfillmentOrderValidatedData:
      type: object
      required: [order]
      properties:
        order:
          $ref: '#/components/schemas/IncomingFulfillmentOrder'

    PackagePackedData:
      type: object
      required: [package]
      properties:
        package:
          $ref: '#/components/schemas/Package'

    # --- Reusable Domain Model Schemas ---
    IncomingFulfillmentOrder:
      description: A representation of the order data needed by the warehouse to perform its work.
      type: object
      properties:
        order_id:
          type: string
          format: uuid
        shipping_speed_category:
          type: string
        destination_address:
          $ref: '#/components/schemas/Address'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    Package:
      type: object
      required:
        - package_id
        - order_id
        - packed_items
        - weight
        - dimensions
      properties:
        package_id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        packed_items:
          type: array
          items:
            $ref: '#/components/schemas/PackedItem'
        weight:
          $ref: '#/components/schemas/Weight'
        dimensions:
          $ref: '#/components/schemas/Dimensions'

    OrderItem:
      type: object
      required:
        - seller_sku
        - quantity
      properties:
        seller_sku:
          type: string
        quantity:
          type: integer

    PackedItem:
      type: object
      required:
        - sku
        - quantity
      properties:
        sku:
          type: string
        quantity:
          type: integer

    Address:
      type: object
      required:
        - country_code
        - postal_code
      properties:
        name:
          type: string
        address_line_1:
          type: string
        city:
          type: string
        state_or_region:
          type: string
        postal_code:
          type: string
        country_code:
          type: string

    Weight:
      type: object
      properties:
        value:
          type: number
          format: float
        unit:
          type: string
          example: "kg"

    Dimensions:
      type: object
      properties:
        length:
          type: number
          format: float
        width:
          type: number
          format: float
        height:
          type: number
          format: float
        unit:
          type: string
          example: "cm"